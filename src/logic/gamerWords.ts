import { ALL_CATEGORIES } from '../data/terms';
import { seedHash, mulberry32 } from './rng';

export interface DailyGamerWord {
  answer: string; // 5-letter word
  dateKey: string; // YYYY-M-D (UTC)
  categoryId: string;
  categoryLabel: string;
  prompt: string; // autogenerated category style prompt
  wordLength: number;
  maxGuesses: number;
}

// Build candidate list (unique 5-letter alphabetic) and map to first category containing it.
const wordToCategory: Record<string,{id:string;label:string}> = {};
const candidatesSet = new Set<string>();
for(const cat of ALL_CATEGORIES){
  for(const w of cat.words){
    if(/^[a-zA-Z]{5}$/.test(w)){
      const lower = w.toLowerCase();
      if(!candidatesSet.has(lower)){
        candidatesSet.add(lower);
        wordToCategory[lower] = { id: cat.id, label: cat.label };
      }
    }
  }
}
export const GAMER_WORD_CANDIDATES = Array.from(candidatesSet.values());

export const GAMER_WORD_LENGTH = 5;
export const GAMER_WORD_MAX_GUESSES = 6;

export function getDailyGamerWord(dateStr?: string): DailyGamerWord {
  const date = dateStr ? new Date(dateStr) : new Date();
  const key = date.getUTCFullYear() + '-' + (date.getUTCMonth()+1) + '-' + date.getUTCDate();
  const h = seedHash('gamerwords:' + key);
  const rand = mulberry32(h);
  const idx = Math.floor(rand() * GAMER_WORD_CANDIDATES.length);
  const answer = GAMER_WORD_CANDIDATES[idx];
  const cat = wordToCategory[answer];
  const prompt = `Category: ${cat.label}`;
  return { answer, dateKey: key, categoryId: cat.id, categoryLabel: cat.label, prompt, wordLength: GAMER_WORD_LENGTH, maxGuesses: GAMER_WORD_MAX_GUESSES };
}

export function getGamerWordForDate(key: string): DailyGamerWord {
  if(!/^\d{4}-\d{1,2}-\d{1,2}$/.test(key)) return getDailyGamerWord();
  return getDailyGamerWord(key);
}